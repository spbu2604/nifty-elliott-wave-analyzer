import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Paper,
  Grid,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  CircularProgress,
} from '@mui/material';
import axios from 'axios';
import StockChart from './components/StockChart';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';

interface Stock {
  symbol: string;
  last_price: number;
  wave_analysis: {
    wave_points: Array<{
      date: string;
      price: number;
      type: string;
    }>;
  };
  technical_indicators: {
    sma20: number;
    rsi: number;
  };
}

function App() {
  const [stocks, setStocks] = useState<string[]>([]);
  const [selectedStock, setSelectedStock] = useState<string>('');
  const [stockData, setStockData] = useState<Stock | null>(null);
  const [loading, setLoading] = useState<boolean>(false);

  useEffect(() => {
    const fetchStocks = async () => {
      try {
        const response = await axios.get(`${API_URL}/stocks/nifty50`);
        setStocks(response.data.symbols);
        if (response.data.symbols.length > 0) {
          setSelectedStock(response.data.symbols[0]);
        }
      } catch (error) {
        console.error('Error fetching stocks:', error);
      }
    };

    fetchStocks();
  }, []);

  useEffect(() => {
    const fetchStockData = async () => {
      if (!selectedStock) return;

      setLoading(true);
      try {
        const response = await axios.get(`${API_URL}/analysis/${selectedStock}`);
        setStockData(response.data);
      } catch (error) {
        console.error('Error fetching stock data:', error);
      }
      setLoading(false);
    };

    fetchStockData();
  }, [selectedStock]);

  return (
    <Container maxWidth="lg">
      <Box sx={{ my: 4 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          Nifty 50 Elliott Wave Analyzer
        </Typography>

        <Paper sx={{ p: 2, mb: 2 }}>
          <FormControl fullWidth>
            <InputLabel>Select Stock</InputLabel>
            <Select
              value={selectedStock}
              onChange={(e) => setSelectedStock(e.target.value)}
              label="Select Stock"
            >
              {stocks.map((stock) => (
                <MenuItem key={stock} value={stock}>
                  {stock}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Paper>

        {loading ? (
          <Box display="flex" justifyContent="center" my={4}>
            <CircularProgress />
          </Box>
        ) : (
          stockData && (
            <Grid container spacing={2}>
              <Grid item xs={12}>
                <Paper sx={{ p: 2 }}>
                  <StockChart stockData={stockData} />
                </Paper>
              </Grid>
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 2 }}>
                  <Typography variant="h6" gutterBottom>
                    Technical Indicators
                  </Typography>
                  <Typography>
                    SMA (20): {stockData.technical_indicators.sma20.toFixed(2)}
                  </Typography>
                  <Typography>
                    RSI (14): {stockData.technical_indicators.rsi.toFixed(2)}
                  </Typography>
                </Paper>
              </Grid>
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 2 }}>
                  <Typography variant="h6" gutterBottom>
                    Wave Analysis
                  </Typography>
                  <Typography>
                    Number of Wave Points: {stockData.wave_analysis.wave_points.length}
                  </Typography>
                  <Typography>
                    Last Price: â‚¹{stockData.last_price.toFixed(2)}
                  </Typography>
                </Paper>
              </Grid>
            </Grid>
          )
        )}
      </Box>
    </Container>
  );
}

export default App;